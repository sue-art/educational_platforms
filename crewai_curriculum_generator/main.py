from crewai import Agent, Task, Crew, Process
from langchain_openai import ChatOpenAI

# Import agent configurations from the agents module
from agents.curriculum_agents import (
    curriculum_expert_config,
    reading_level_specialist_config,
    data_structure_engineer_config
)

# Main script execution
if __name__ == "__main__":
    print("CrewAI Curriculum Generator - Initializing...")

    # Initialize the V2 compatible LLM
    # Ensure OPENAI_API_KEY environment variable is set for this to work.
    # User can change the model as needed.
    try:
        # For this project, a more capable model might be beneficial for content quality.
        # Using gpt-4-turbo if available, else fallback or let user configure.
        llm = ChatOpenAI(model="gpt-4-turbo", temperature=0.7)
        print("LLM initialized with gpt-4-turbo.")
    except Exception as e_gpt4_turbo:
        print(f"Error initializing gpt-4-turbo: {e_gpt4_turbo}. Trying gpt-3.5-turbo...")
        try:
            llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0.7)
            print("LLM initialized with gpt-3.5-turbo.")
        except Exception as e_gpt35_turbo:
            print(f"Error initializing LLM. Please ensure OPENAI_API_KEY is set and valid: {e_gpt35_turbo}")
            print("Attempting to proceed without LLM initialization for structural check, but CrewAI will likely fail.")
            llm = None # Fallback for structural checks

    # Instantiate Agents with the shared LLM
    curriculum_expert = Agent(**curriculum_expert_config, llm=llm)
    reading_level_specialist = Agent(**reading_level_specialist_config, llm=llm)
    data_structure_engineer = Agent(**data_structure_engineer_config, llm=llm)

    print("Agents instantiated.")

    # Define the tasks for the crew
    # Task 1: Content Generation by CurriculumExpert
    task_generate_content = Task(
        description=(
            "Define a reading passage and 2-3 assessment questions for a specified reading level. "
            "For this run, target 'Grade 3'. The passage should be around 50-70 words. "
            "Questions should be multiple-choice with 3-4 options each. "
            "Ensure content aligns with typical educational goals for Grade 3, focusing on basic comprehension and vocabulary."
        ),
        expected_output=(
            "A textual description of one reading passage appropriate for Grade 3, "
            "followed by 2-3 multiple-choice assessment questions for that passage. "
            "Each question should include the question text, 3-4 answer options (labeled a, b, c, d), "
            "and the correct answer key (e.g., 'correctAnswer: b')."
        ),
        agent=curriculum_expert,
    )

    # Task 2: Content Analysis and Validation by ReadingLevelAssessmentSpecialist
    task_analyze_and_validate = Task(
        description=(
            "Analyze the reading passage and assessment questions generated by the Curriculum Design Expert. "
            "Assign appropriate reading level metrics (e.g., Lexile, grade level equivalent using your tools) to the passage. "
            "Validate that the questions appropriately test comprehension for the assigned level. "
            "Provide a summary of your findings, including the metrics and validation notes for each question."
        ),
        expected_output=(
            "A textual summary that includes: "
            "1. The assigned reading level metrics for the passage (e.g., Lexile score, grade level). "
            "2. Validation notes for each assessment question, confirming its appropriateness for the passage's level and the skill it tests. "
            "This output will be used by the Data Structure Engineer."
        ),
        agent=reading_level_specialist,
        context=[task_generate_content] # Depends on the output of the first task
    )

    # Task 3: Data Structuring by DataStructureEngineer
    task_structure_data_as_json = Task(
        description=(
            "Take the reading passage, assessment questions (with options and correct answers), "
            "and reading level metrics generated and validated in the previous tasks. "
            "Format this information into a single, well-structured JSON object. "
            "The JSON structure should follow the provided API data structure guidelines, specifically creating an 'assessmentSet' "
            "containing 'passages' (array with one passage) and 'questions' (array). "
            "Ensure all IDs are unique strings (e.g., 'passage-g3-1', 'q-g3-1-1'). "
            "Include fields like 'title', 'gradeLevel', 'lexileRange' (approximated from metrics), 'estimatedTimeMinutes' (e.g., 15), "
            "and 'learningObjectives' (e.g., ['Identify main ideas', 'Basic vocabulary in context']) for the assessmentSet. "
            "For passages, include 'id', 'title', 'text', 'lexileLevel', 'wordCount', 'topicTags', 'vocabularyLevel'. "
            "For questions, include 'id', 'passageId', 'questionText', 'questionType' ('multiple-choice'), 'options' (array of objects with 'id' and 'text'), 'correctAnswer', 'skillAssessed', 'difficultyLevel'."
        ),
        expected_output=(
            "A single JSON string representing one complete 'assessmentSet'. This JSON object must be valid and "
            "adhere to the specified structure, containing all the elements from the input content, "
            "formatted correctly (e.g., passage text, question text, options, correct answers, metrics)."
        ),
        agent=data_structure_engineer,
        context=[task_generate_content, task_analyze_and_validate] # Depends on outputs of both previous tasks
    )

    print("Tasks defined.")

    # Form the curriculum generation crew
    curriculum_crew = Crew(
        agents=[curriculum_expert, reading_level_specialist, data_structure_engineer],
        tasks=[task_generate_content, task_analyze_and_validate, task_structure_data_as_json],
        verbose=2,
        process=Process.sequential # Tasks will be executed one after another
    )

    print("\nCrew formation complete. Starting crew kickoff...")

    if llm is None:
        print("LLM not initialized. CrewAI kickoff will likely fail. This run is primarily for structural validation.")

    try:
        # Execute the crew's work
        result = curriculum_crew.kickoff()

        print("\n######################")
        print("## Crew Execution Result (Final JSON Output Expected):")
        print("######################")
        print(result)
    except Exception as e:
        print(f"\nAn error occurred during crew kickoff: {e}")
        print("This might be due to missing API keys, tool errors, or other runtime issues.")
